from unittest.mock import Mock
import tmdb_client 
from tmdb_client import get_movies_list
from main import app
import pytest

@pytest.mark.parametrize("list_type", ["popular", "top_rated", "upcoming", "now_playing"])
def test_homepage(monkeypatch, list_type):
    api_mock = Mock(return_value={'results': []})
    monkeypatch.setattr("tmdb_client.get_movies", api_mock)
    monkeypatch.setattr("tmdb_client.get_movies_list", get_movies_list)

    with app.test_client() as client:
        response = client.get(f'/?list_type={list_type}')

        assert response.status_code == 200
        api_mock.assert_called_once_with(list_type)

def test_get_poster_url_uses_default_size():
    poster_api_path = "some-poster-path"
    expected_default_size = 'w342'

    poster_url = tmdb_client.get_poster_url(poster_api_path=poster_api_path)

    assert expected_default_size in poster_url

    

def test_get_movies_list_type_popular():
    movies_list = tmdb_client.get_movies_list(list_type="popular")
    assert movies_list is not None

def test_get_movies_list(monkeypatch):
    mock_movies_list = ['Movie 1', 'Movie 2']
 
    requests_mock = Mock()

    response = requests_mock.return_value
    response.json.return_value = mock_movies_list
    
    monkeypatch.setattr("tmdb_client.requests.get", requests_mock)

    movies_list = tmdb_client.get_movies_list(list_type="popular")
    assert movies_list == mock_movies_list

def test_get_single_movie(monkeypatch):
    movie_id = 1

    mocked_response = {"id": movie_id, "title": "Movie 1"}
    requests_mock = Mock(return_value=Mock(json=Mock(return_value=mocked_response)))
    monkeypatch.setattr("tmdb_client.requests.get", requests_mock)

    result = tmdb_client.get_single_movie(movie_id)

    assert result == mocked_response

def test_get_movie_images(monkeypatch):
    movie_id = 1

    mocked_response = {"id": movie_id, "images": ["image1.jpg", "image2.jpg"]}
    requests_mock = Mock(return_value=Mock(json=Mock(return_value=mocked_response)))
    monkeypatch.setattr("tmdb_client.requests.get", requests_mock)

    result = tmdb_client.get_movie_images(movie_id)

    assert result == mocked_response["images"]

def test_get_single_movie_cast(monkeypatch):
    movie_id = 1

    mocked_response = {"id": movie_id, "cast": ["Actor 1", "Actor 2"]}
    requests_mock = Mock(return_value=Mock(json=Mock(return_value=mocked_response)))
    monkeypatch.setattr("tmdb_client.requests.get", requests_mock)

    result = tmdb_client.get_single_movie_cast(movie_id)

    assert result == mocked_response["cast"]




  